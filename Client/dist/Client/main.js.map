{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/shared/user.service.ts","webpack:///./src/app/user/login/login.component.html","webpack:///./src/app/user/login/login.component.ts","webpack:///./src/app/user/register/register.component.html","webpack:///./src/app/user/register/register.component.ts","webpack:///./src/app/user/user.component.html","webpack:///./src/app/user/user.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { UserComponent } from './user/user.component';\nimport { RegisterComponent } from './user/register/register.component';\nimport { LoginComponent } from './user/login/login.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/user/register', pathMatch: 'full' },\n  { path: 'user', component: UserComponent,\nchildren: [\n  { path: 'register', component: RegisterComponent },\n  { path: 'login', component: LoginComponent }\n\n]\n}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Client';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { UserComponent } from './user/user.component';\nimport { RegisterComponent } from './user/register/register.component';\nimport { UserService } from './shared/user.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ToastrModule, ToastrService } from 'ngx-toastr';\nimport { LoginComponent } from './user/login/login.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    UserComponent,\n    RegisterComponent,\n    LoginComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    ToastrModule.forRoot({\n      progressBar: true\n    })\n  ],\n  providers: [UserService, ToastrService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private fb: FormBuilder, private http: HttpClient) { }\n\n  readonly BaseURI = 'http://localhost:53057/api';\n\n  formModel = this.fb.group({\n    UserName: ['', Validators.required],\n    Email: ['', Validators.email],\n    FullName: [''],\n    Passwords: this.fb.group({\n      Password: ['', [Validators.required, Validators.minLength(4)]],\n      ConfirmPassword: ['', Validators.required]\n    }, {validator: this.comparePasswords })\n  });\n\n  comparePasswords(fb: FormGroup) {\n    const confirmPasswordsCtrl = fb.get('ConfirmPassword');\n\n    if (confirmPasswordsCtrl.errors == null || 'passwordMismatch' in confirmPasswordsCtrl.errors) {\n      if (fb.get('Password').value !== confirmPasswordsCtrl.value) {\n        confirmPasswordsCtrl.setErrors({passwordMismatch: true});\n      } else {\n        confirmPasswordsCtrl.setErrors(null);\n      }\n\n    }\n  }\n\n  register() {\n    const body = {\n      UserName: this.formModel.value.UserName,\n      Email: this.formModel.value.Email,\n      FullName: this.formModel.value.FullName,\n      Password: this.formModel.value.Passwords.Password\n    };\n    return this.http.post(this.BaseURI + '/AppUser/Register', body);\n  }\n}\n","module.exports = \"<p>\\n  login works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styles: []\n})\nexport class LoginComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<!-- <div class=\\\"row mt-4\\\">\\n<div class=\\\"col-md-6\\\">  \\n<div class=\\\"row\\\" style=\\\"height: 450px;\\\">\\n<div class=\\\"col-md-12 my-auto side-header\\\"> \\n<img src=\\\"/assets/img/add_user.png\\\" class=\\\"mx-auto d-block\\\">\\n<h1>User Registration</h1>\\n<p><em>-Using <strong>ASP.NET Core Web API</strong> and <strong>Angular 7</strong></em></p>\\n</div>\\n</div>\\n</div>\\n<div class=\\\"col-md-6\\\"> -->\\n  <form [formGroup]=\\\"service.formModel\\\" autocomplete=\\\"off\\\" (submit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group required\\\" >  \\n      <label>User Name:</label>\\n      <input class=\\\"form-control\\\" formControlName=\\\"UserName\\\">\\n      <label class=\\\"text-danger\\\" *ngIf=\\\"service.formModel.get('UserName').touched &&\\n      service.formModel.get('UserName').errors?.required\\\">This field is required!</label>\\n    </div>\\n    <div class=\\\"form-group\\\">  \\n        <label>Email:</label>\\n        <input class=\\\"form-control\\\" formControlName=\\\"Email\\\">\\n        <label class=\\\"text-danger\\\" *ngIf=\\\"service.formModel.get('Email').touched &&\\n      service.formModel.get('Email').errors?.email\\\">Invalid email address!</label>\\n      </div>\\n      <div class=\\\"form-group\\\">  \\n          <label>Full Name:</label>\\n          <input class=\\\"form-control\\\" formControlName=\\\"FullName\\\">\\n        </div>\\n        <div formGroupName=\\\"Passwords\\\">\\n    <div class=\\\"form-group required\\\" >  \\n            <label>Password:</label>\\n            <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"Password\\\">\\n            <label class=\\\"text-danger\\\" *ngIf=\\\"service.formModel.get('Passwords.Password').touched &&\\n      service.formModel.get('Passwords.Password').errors?.required\\\">This field is required!</label>\\n      <label class=\\\"text-danger\\\" *ngIf=\\\"service.formModel.get('Passwords.Password').touched &&\\n      service.formModel.get('Passwords.Password').errors?.minLength\\\">Minimum 4 character required!</label>\\n          </div>\\n          <div class=\\\"form-group required\\\" >  \\n              <label>Confirm Password:</label>\\n              <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"ConfirmPassword\\\">\\n              <label class=\\\"text-danger\\\" *ngIf=\\\"service.formModel.get('Passwords.ConfirmPassword').touched &&\\n              service.formModel.get('Passwords.ConfirmPassword').errors?.required\\\">This field is required!</label>\\n              <label class=\\\"text-danger\\\" *ngIf=\\\"service.formModel.get('Passwords.ConfirmPassword').touched &&\\n              service.formModel.get('Passwords.ConfirmPassword').errors?.passwordMismatch\\\">Passwords does not match!</label>\\n            </div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-md-8 offset-md-2\\\"> \\n              <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-block\\\" [disabled]=\\\"!service.formModel.valid\\\">Register</button>\\n            </div>\\n          </div>\\n  </form>\\n<!-- </div>       \\n</div>   -->\\n\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from 'src/app/shared/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styles: []\n})\nexport class RegisterComponent implements OnInit {\n  //\n  constructor(private service: UserService, private toastr: ToastrService) { }\n\n  ngOnInit() {\n    this.service.formModel.reset();\n  }\n\n  onSubmit() {\n    this.service.register().subscribe(\n      (res: any) => {\n        if (res.succeeded) {\n          this.service.formModel.reset();\n          this.toastr.success('New user created!', 'Register Process Successful');\n        } else {\n          res.errors.forEach(element => {\n            switch (element.code) {\n              case 'DuplicateUserName':\n                  this.toastr.error('User Name is already taken!', 'Register Process failed');\n                  break;\n                default:\n                    this.toastr.error(element.description, 'Register Process failed');\n                    break;\n            }\n          })\n        }\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n}\n","module.exports = \"<div class=\\\"wrapper\\\">\\n  <div class=\\\"wrappered-div\\\"> \\n    <div class=\\\"tab-header\\\">  \\n      <h2  routerLink='/user/login' routerLinkActive='active'>Sign In</h2>\\n      <h2  routerLink='/user/register' routerLinkActive='active'>Sign Up</h2>\\n    </div>\\n    <div class=\\\"row\\\"> \\n      <div class=\\\"col-md-10 offset-md-1\\\"> \\n        <router-outlet></router-outlet>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styles: []\n})\nexport class UserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}